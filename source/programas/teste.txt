/*
    Iniciando vetores para controle de memória      
*/

int pc_processes[10];
int memory_location[10];
int init_pc[10];
int exec[10];
int nomes[10];

int see_if_ended(void){

    int i;
    i = 0;

    while(i < 4){

        if(pc_processes[i] != 0){
            return 0;
        }
        i = i + 1;
    }

    return 1;
}

int find_by_index(int num){

    int i;
    i = 0;

    while(i < 4){
        if(num == nomes[i]){
            return 1;
        }
        i = i+1;
    }

    return 10;

}

void main(void){

    /*
        Declarando variáveis
    */

    int i;
    int preempcao;
    int end;
    int opcao;
    int quantidade;
    int processo;
    int indice;

    /*
        Inicia o nomes dos programas
    */ 

    i = 0;
    while(i < 4){
        nomes[i] = i;
        i = i + 1;
    }

    /*
        Determinando início de cada processo na rom
    */
    
    pc_processes[0] = 192;
    pc_processes[1] = 211;
    pc_processes[2] = 230;
    pc_processes[3] = 256;


    /*
        Determinando o início de cada processo da ram
    */

    memory_location[0] = 200;
    memory_location[1] = 400;
    memory_location[2] = 600;
    memory_location[3] = 800;

    /*
        Determinadno início de cada processo na rom para salto em instruções do tipo J
    */

    init_pc[0] = 192;
    init_pc[1] = 211;
    init_pc[2] = 230;
    init_pc[3] = 256;

    /*
        Perguntando ao usuário quantos programas devem ser executados e o quantum de cada programa
    */ 

    while(1 == 1){

        opcao = input();

        /* rodar todos */
        if(opcao == 1){

            preempcao = input();
        
            set_quantum_value(10);

            if(preempcao == 0){
                set_quantum_value(9999);
            }

        }

        /* rodar uma quantidade específica de programas especifico */
        if(opcao == 2 ){
            quantidade = input();

            i = 0;
            while(i < quantidade){
                processo = input();
                indice = find_by_index(processo);
                exec[indice] = 1; 
                i = i + 1;
            }

            i = 0;
            while(i < quantidade){
                if(exec[i] != 1){
                    pc_processes[i] = 0;
                }
                i = i + 1;
            }


            preempcao = input();
        
            set_quantum_value(10);

            if(preempcao == 0){
                set_quantum_value(9999);
            }
        }

        /*
            Alterar nomes dos vetores
        */
        if(opcao == 3){

        }


        i = 0;
        end = 0;

        while(end != 1){

            while(i < 4){
                set_process_bcd(0);
            
                if(pc_processes[i] != 0) {
                    set_process_bcd(i+1);
                    change_context(pc_processes[i], memory_location[i], init_pc[i]);
                    pc_processes[i] = PC_INTERRUPTION();         
                }
                i = i+1;
            }

            i = 0;
            end = see_if_ended(); 
        }

        output(99999);
    }
        
}